#!/bin/bash
declare -r CLEAR='\033[0m'
declare -r RED='\033[31m'
declare -r GREEN='\033[32m'
declare -r YELLOW='\033[33m'
declare -r IND='  '

echo -en $GREEN
cat <<'EOH'
################################################################################
#                               Post-Commit Hook                               #
################################################################################
EOH
echo -en $CLEAR

this_branch=$( git branch | grep -m 1 '^\*\s' | cut -c 3- )
this_hash=$( git rev-parse $this_branch )
is_deployed=false

while IFS=$'\0' read -r deploy_line; do
  i=0
  branch=
  src=
  dst=
  mode=

  while IFS=$'\0' read -r deploy_val; do
    case "$i" in
      0) branch="$deploy_val";;
      1) src="$( sed -E 's/([^\.])\/$/\1/' <<< $deploy_val )";;
      2) dst="$( sed -E 's/([^\.])\/$/\1/' <<< $deploy_val )";;
      3) mode="$deploy_val";;
    esac

    ((i++))
  done < <( echo "$deploy_line" | xargs -n1 )

  if [ "$this_branch" = "$branch" ]; then
    if [ ! -d "$src" ]; then
      echo -en $RED
      echo -n "Not deploying branch {$branch} because dir {$src} does not "
      echo -n 'exist.'
      echo -e $CLEAR
    elif [ ! -d "$dst" ]; then
      echo -en $RED
      echo -n "Not deploying branch {$branch} because dir {$dst} does not "
      echo -n 'exist.'
      echo -e $CLEAR
    elif [ "$mode" != '' ] &&     # default
      [ "$mode" != 'false' ] &&   # default   (for v2.0 backwards compatibility)
      [ "$mode" != 'clean' ] &&   # clean
      [ "$mode" != 'true' ] &&    # clean     (for v2.0 backwards compatibility)
      [ "$mode" != 'diff' ]; then # diff
        echo -en $RED
        echo -n "Not deploying branch {$branch} because mode {$mode} is "
        echo -n 'invalid.'
        echo -e $CLEAR
    else
      # Normalize mode
      if [ "$mode" = '' ] || [ "$mode" = 'false' ]; then
        mode='default'
      elif [ "$mode" = 'true' ]; then
        mode='clean'
      elif [ $( git rev-list --count "$this_hash" ) -eq 1 ]; then
        echo -en $YELLOW
        echo -n 'Overriding diff mode to default because this is the first '
        echo -n 'commit.'
        echo -e $CLEAR
        mode='default'
      fi

      echo -en $GREEN
      echo -n "Deploying branch {$branch} dir {$src} to dir {$dst} in {$mode} "
      echo -n 'mode.'
      echo -e $CLEAR

      if [ "$mode" = 'clean' ]; then
        echo -e "${GREEN}${IND}Cleaning dir {$dst}.$CLEAR"
        rm -rf "$dst"/*
      elif [ "$mode" = 'diff' ]; then
        diffs=$( git diff --name-only "$this_hash"~1 "$this_hash" )
        echo "diffs: $diffs"
#        declare -a diffs
#
#        while IFS=$'\0' read -r file; do
#          echo "diff deploy: $file"
#          diffs["$file"]=true
#        done < <( git diff --name-only "$this_hash"~1 "$this_hash" )
#
#        echo 'Dumping diffs.'
#        for key in "${!diffs[@]}"; do
#          echo "$key=${diffs[$key]}"
#        done
      fi

      while IFS=$'\0' read -r src_path_rel_work_tree; do
        src_path_rel_src=$( \
          realpath --relative-to="$src" "$src_path_rel_work_tree" )
        dst_path="$dst/$src_path_rel_src"

        if [ ! -f "$dst_path" ]; then
          echo -e "${GREEN}${IND}Creating file {$dst_path}.$CLEAR"
          mkdir -p "$dst/$( dirname "$src_path_rel_src" )"
          cp "$src_path_rel_work_tree" "$dst_path"
        else
          if [ "$mode" = 'diff' ] &&
            [ $( echo $diffs | fgrep -m 1 "$src_path_rel_src" ) = '' ]; then
            echo -en $GREEN
            echo -n "${IND}Skipping file {$src_path_rel_work_tree} because it "
            echo -n 'has not changed since last commit.'
            echo -e $CLEAR
          else
            echo -e "${GREEN}${IND}Overwriting file {$dst_path}.$CLEAR"
            cp "$src_path_rel_work_tree" "$dst_path"
          fi
        fi
      done < <( git ls-tree --name-only -r "$this_hash" "$src" )

#      while IFS=$'\0' read -r src_path_rel_work_tree; do
#        src_path_rel_src=$( \
#          realpath --relative-to="$src" "$src_path_rel_work_tree" )
#        dst_path="$dst/$src_path_rel_src"
#
#        if [ ! -f "$dst_path" ]; then
#          echo -e "${GREEN}${IND}Creating file {$dst_path}.$CLEAR"
#          mkdir -p "$dst/$( dirname "$src_path_rel_src" )"
#          cp "$src_path_rel_work_tree" "$dst_path"
#        else
#          if [ "$mode" = 'diff' ] &&
#            ! [ ${diffs["$src_path_rel_work_tree"]+true} ]; then
#            echo -en $GREEN
#            echo -n "${IND}Skipping file {$src_path_rel_work_tree} because it "
#            echo -n 'has not changed since last commit.'
#            echo -e $CLEAR
#          else
#            echo -e "${GREEN}${IND}Overwriting file {$dst_path}.$CLEAR"
#            cp "$src_path_rel_work_tree" "$dst_path"
#          fi
#        fi
#      done < <( git ls-tree --name-only -r "$this_hash" "$src" )

      is_deployed=true
    fi
  fi
done < <( git config --get-all deploy.branch )

if [ "$is_deployed" = 'false' ]; then
  echo -e "${YELLOW}Did not deploy branch $this_branch.$CLEAR"
fi

echo -e "${GREEN}Post-Commit hook finished.$CLEAR"
