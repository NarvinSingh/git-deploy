#!/bin/bash
echo -en "\e[32m"
cat <<"EOH"
################################################################################
#                                                                              #
# Post-Merge Hook                                                              #
#                                                                              #
################################################################################
EOH
echo -en "\e[0m"

declare -r IND='    '

this_branch=$( git branch | grep '^\*\s[^\s]' | cut -c 3- )
this_hash=$( git rev-parse $this_branch )
is_deployed=false

while IFS=$'\0' read -r deploy_line; do
    i=0
    branch=
    src=
    dst=
    clean=

    while IFS=$'\0' read -r deploy_val; do
        case "$i" in
            0) branch="$deploy_val";;
            1) src="$( sed -E 's/([^\.])\/$/\1/' <<< $deploy_val )";;
            2) dst="$( sed -E 's/([^\.])\/$/\1/' <<< $deploy_val )";;
            3) clean="$deploy_val";;
        esac

        ((i++))
    done < <( echo "$deploy_line" | xargs -n1 )

    if [ "$this_branch" == "$branch" ]; then
        if [ ! -d "$src" ]; then
            echo -e "\e[33mNot deploying branch {$branch} because dir {$src} does not exist.\e[0m"
        elif [ ! -d "$dst" ]; then
            echo -e "\e[33mNot deploying branch {$branch} because dir {$dst} does not exist.\e[0m"
        else
            echo -e "\e[32mDeploying branch {$branch} dir {$src} to dir {$dst}.\e[0m"

            if [ "$clean" == true ]; then
                echo -e "\e[32m${IND}Cleaning dir {$dst}.\e[0m"
                rm -rf "$dst"/*
            fi

            while IFS=$'\0' read -r src_path_rel_work_tree; do
                src_path_rel_src=$( realpath --relative-to="$src" "$src_path_rel_work_tree" )
                dst_path="$dst/$src_path_rel_src"

                if [ ! -f "$dst_path" ]; then
                    echo -e "\e[32m${IND}Creating file {$dst_path}.\e[0m"
                    mkdir -p "$dst/$( dirname "$src_path_rel_src" )"
                    cp "$src_path_rel_work_tree" "$dst_path"
                else
                    echo -e "\e[32m${IND}Overwriting file {$dst_path}.\e[0m"
                    cp "$src_path_rel_work_tree" "$dst_path"
                fi
            done < <( git ls-tree --name-only -r $this_hash $src )

            is_deployed=true
        fi
    fi
done < <( git config --get-all deploy.branch )

if [ "$is_deployed" == false ]; then
    echo -e "\e[33mDid not deploy branch $this_branch.\e[0m"
fi

echo -e '\e[32mPost-merge hook finished.\e[0m'
