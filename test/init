#!/bin/sh

# The source directory, test/app may or may not be committed.
# The destination directories are ignored.
# The source directory is deleted and recreated to ensure its contents.
# The destination directories are deleted and recreated to ensure their initial
# contents.
# The branch is commited with --allow-empty in case there were no changes.
# This triggers the post-commit hook.
# The contents of the destination directories are checked.
# The merge branch is created.
# A new file is created in the source directory and commited.
# The merge branch is merged.
# The contents of the destination directories are checked.

# {{{ Function to check file existence and contents
function chkfile()
{
  file=$1
  content=$2

  if [ -f "$file" ]; then
    printf "${GREEN}File Found: $file\n$CLEAR"

    if [ "$content" = "$(cat "$file")" ]; then
      printf "${GREEN}File OK: $file\n$CLEAR"
    else
      printf "${RED}File not OK: $file\n$CLEAR"
    fi
  else
    printf "${RED}File not Found: $file\n$CLEAR"
  fi
}
# }}}

# {{{ Function to check file existence and contents
function chkdir()
{
  dir=$1
  files=$2

  while read file; do
    if [ -f "$dir/$files" ]; then
    else
    fi
  done
}
# }}}
# {{{ Foreground color constants
CLEAR='\033[0m'
BLACK='\033[30m'
RED='\033[31m'
GREEN='\033[32m'
YELLOW='\033[33m'
BLUE='\033[34m'
MAGENTA='\033[35m'
CYAN='\033[36m'
LGRAY='\033[37m'
DGRAY='\033[90m'
LRED='\033[91m'
LGREEN='\033[92m'
LYELLOW='\033[93m'
LBLUE='\033[94m'
LMAGENTA='\033[95m'
LCYAN='\033[96m'
WHITE='\033[97m'
# }}}

# {{{ Debug: print foreground colors
# printf "${BLACK}BLACK\n"
# printf "${RED}RED\n"
# printf "${GREEN}GREEN\n"
# printf "${YELLOW}YELLOW\n"
# printf "${BLUE}BLUE\n"
# printf "${MAGENTA}MAGENTA\n"
# printf "${CYAN}CYAN\n"
# printf "${LGRAY}LGRAY\n"
# printf "${DGRAY}DGRAY\n"
# printf "${LRED}LRED\n"
# printf "${LGREEN}LGREEN\n"
# printf "${LYELLOW}LYELLOW\n"
# printf "${LBLUE}LBLUE\n"
# printf "${LMAGENTA}LMAGENTA\n"
# printf "${LCYAN}LCYAN\n"
# printf "${WHITE}WHITE\n"
# printf "${CLEAR}CLEAR\n"
# exit 0
# }}}

this_branch=$(git branch | grep -m 1 '^\*\s' | cut -c 3-)

if [ "$this_branch" = test ]; then
  # {{{ Initialize git config
  git config --unset-all deploy.branch

  # No-op because branch is empty
  git config deploy.branch ''

  # No-op because branch is empty
  git config --add deploy.branch ' ./test/app ./test/no_op'

  # No-op because source is empty
  git config --add deploy.branch "test '' ./test/no_op"

  # No-op because source and destination are empty
  git config --add deploy.branch "test '' ''"

  # No-op because source doesn't exist
  git config --add deploy.branch 'test ./test/app_non_existent ./test/no_op'

  # No-op because destination doesn't exist
  git config --add deploy.branch 'test ./test/app ./test/deploy_non_existent'

  # Deploy single directory without cleaning destination
  git config --add deploy.branch "test ./test/app/ './test/deploy default'"

  # Deploy single directory without cleaning destination
  git config --add deploy.branch \
    "test ./test/app './test/deploy default 2/' false"

  # Deploy single directory after cleaning destination
  git config --add deploy.branch 'test ./test/app ./test/deploy_clean true'

  # Deploy in diff mode
  git config --add deploy.branch 'test ./test/app ./test/deploy_diff diff'
  # }}}

  dir=$(dirname $0)

  # {{{ Delete directories
  rm -rf "$dir/app"
  rm -rf "$dir/deploy default"
  rm -rf "$dir/deploy default 2"
  rm -rf "$dir/deploy_clean"
  rm -rf "$dir/deploy_diff"
  # }}}

  # {{{ Create the deployment source
  mkdir "$dir/app"
  mkdir "$dir/app/dir with spaces"
  mkdir "$dir/app/js"
  printf 'File in root to be deployed' > "$dir/app/file with spaces.txt"
  printf 'File in subdir to be deployed' > "$dir/app/dir with spaces/file.txt"
  printf '// File in subdir to be deployed' > "$dir/app/js/main.js"
  # }}}

  # {{{ Create the first deployment default mode destination
  mkdir "$dir/deploy default"
  mkdir "$dir/deploy default/dir with spaces"
  mkdir "$dir/deploy default/js"
  mkdir "$dir/deploy default/dir_not_in_src"
  printf 'File in root to be overwritten' > \
    "$dir/deploy default/file with spaces.txt"
  printf 'File in root not to be overwritten' > \
    "$dir/deploy default/file_not_in_src.txt"
  printf 'File in subdir to be overwritten' > \
    "$dir/deploy default/dir with spaces/file.txt"
  printf 'File in subdir not to be overwritten' > \
    "$dir/deploy default/dir with spaces/file_not_in_src.txt"
  printf '// File in subdir to be overwritten' > \
    "$dir/deploy default/js/main.js"
  printf '// File in subdir not to be overwritten' > \
    "$dir/deploy default/js/file_not_in_src.js"
  printf 'File in subdir not to be overwritten' > \
    "$dir/deploy default/dir_not_in_src/file_not_in_src.txt"
  # }}}

  # {{{ Create the second deployment default mode destination
  mkdir "$dir/deploy default 2"
  mkdir "$dir/deploy default 2/dir with spaces"
  mkdir "$dir/deploy default 2/js"
  mkdir "$dir/deploy default 2/dir_not_in_src"
  printf 'File in root to be overwritten' > \
    "$dir/deploy default 2/file with spaces.txt"
  printf 'File in root not to be overwritten' > \
    "$dir/deploy default 2/file_not_in_src.txt"
  printf 'File in subdir to be overwritten' > \
    "$dir/deploy default 2/dir with spaces/file.txt"
  printf 'File in subdir not to be overwritten' > \
    "$dir/deploy default 2/dir with spaces/file_not_in_src.txt"
  printf '// File in subdir to be overwritten' > \
    "$dir/deploy default 2/js/main.js"
  printf '// File in subdir not to be overwritten' > \
    "$dir/deploy default 2/js/file_not_in_src.js"
  printf 'File in subdir not to be overwritten' > \
    "$dir/deploy default 2/dir_not_in_src/file_not_in_src.txt"
  # }}}

  # {{{ Create the deployment clean mode destination
  mkdir "$dir/deploy_clean"
  mkdir "$dir/deploy_clean/dir with spaces"
  mkdir "$dir/deploy_clean/js"
  mkdir "$dir/deploy_clean/dir_not_in_src"
  printf 'File in root to be overwritten' > \
    "$dir/deploy_clean/file with spaces.txt"
  printf 'File in root to be deleted' > "$dir/deploy_clean/file_not_in_src.txt"
  printf 'File in subdir to be overwritten' > \
    "$dir/deploy_clean/dir with spaces/file.txt"
  printf 'File in subdir to be deleted' > \
    "$dir/deploy_clean/dir with spaces/file_not_in_src.txt"
  printf '// File in subdir to be overwritten' > "$dir/deploy_clean/js/main.txt"
  printf '// File in subdir to be deleted' > \
    "$dir/deploy_clean/js/file_not_in_src.js"
  printf 'File in subdir to be deleted' > \
    "$dir/deploy_clean/dir_not_in_src/file_not_in_src.txt"
  # }}}

  # {{{ Create the deployment diff mode destination
  mkdir "$dir/deploy_diff"
  mkdir "$dir/deploy_diff/js"
  mkdir "$dir/deploy_diff/dir_not_in_src"
  printf 'File in root not to be deployed and will be out of sync' > \
    "$dir/deploy_diff/file with spaces.txt"
  printf 'File in root not to be overwritten' > \
    "$dir/deploy_diff/file_not_in_src.txt"
  printf '// File in subdir not to be overwritten' > \
    "$dir/deploy_diff/js/file_not_in_src.js"
  printf 'File in subdir not to be overwritten' > \
    "$dir/deploy_diff/dir_not_in_src/file_not_in_src.txt"
  # }}}

  # {{{ Commit test branch
  git add "$dir/app"
  git commit --allow-empty \
    -m "$(date +'%Y-%m-%d %H:%M:%S') - Testing post-commit hook"
  # }}}

  # {{{ Check deployment directories
  chk "$dir/deploy default/file with spaces.txt" 'File in root to be deployed'
  chk "$dir/deploy default/dir with spaces/file.txt" \
    'File in subdir to be deployed'
  chk "$dir/deploy default/js/main.js" 'File in subdir to be deployed'
  chk "$dir/deploy default/file_not_in_src.txt" \
    'File in root not to be deployed'
  # }}}
else
  printf \
    "${RED}$0 should be run with branch $MAGENTA[test]$RED checked out\n$CLEAR"
fi
